id,chapter,title,content
7,2-1,조건문 if와 들여쓰기,"조건문은 주어진 상황에 따라 코드의 실행 여부가 변화하는 것을 의미합니다. Python에서는 이런 흐름을 if문을 통해 만들어 냅니다. 간단한 예로 어느 문제의 정답이 1이며, 정답을 맞혔을 때 메시지를 출력하는 상황을 생각할 수 있습니다. 이때 이런 상황을 Python으로는 아래와 같이 나타낼 수 있습니다.\n--------\n>>> if answer == 1:\n...   print(""정답입니다!"")\n--------\nPython에서 answer의 값이 1이어야만 “정답입니다!”가 표시된다는 것을 이렇게 표현할 수 있습니다.\nPython에서 if문의 구조는 다음과 같습니다.\n--------\n>>> if (조건):\n...   (조건이 참일 때 실행할 구문 1)\n...   (조건이 참일 때 실행할 구문 2)\n...   ...\n--------\n이런 구조에서 눈여겨볼 점은 각 구문이 if보다 오른쪽에 쓰여 있다는 점입니다. 이를 들여쓰기(indentation)라 합니다. 한 if절 안에서 들여쓰기를 얼마나 했는지는 각 줄마다 모두 같아야 하며, 이는 나중에 나올 while과 for에서도 마찬가지입니다. Tab이나 일반 공백을 이용할 수 있는데, Tab 하나가 몇 칸에 해당하는지는 사용자 환경에 따라 다르기 때문에, Tab과 일반 공백을 섞어 쓰는 것은 혼선을 막기 위해 하지 말아야 하며, 일반 공백으로 통일하는 것이 권장됩니다. 대부분의 IDE에서는 쌍점 바로 아랫줄에서 자동으로 들여쓰기를 만들어 주기도 하고, Tab을 눌렀을 때 자동으로 공백으로 변환해 주는 기능이 있어 이런 경우 Tab을 사용해도 무방합니다. \n들여쓰기 오류(IndentationError)가 발생하는 상황을 두 개 제시해 보았습니다.\n--------\n>>> if 1 > 0:\n... print(""출력"")\n  File ""<stdin>"", line 2\n    print(""출력"")\n    ^\nIndentationError: expected an indented block after 'if' statement on line 1\n--------\n>>> if 1 > 0:\n...   print(""출력 1"")\n...  print(""출력 2"")\n  File ""<stdin>"", line 3\n    print(""출력 2"")\n                 ^\nIndentationError: unindent does not match any outer indentation level\n--------\n첫 예시에서는 if와 print의 들여쓰기 수준이 같습니다. 쌍점이 오면 들여쓰기가 된 줄을 적어도 하나 이상 필요로 하기 때문에, 오류가 발생합니다. 두 번째 예시에서는 두 print문의 들여쓰기 정도가 다른데, 이런 경우에도 들여쓰기 오류가 발생합니다.\n이와 같이 조건문이나 반복문에서는 들여쓰기가 코드의 흐름을 좌우하며 잘못된 경우 오류를 만들 수 있기 때문에 들여쓰기에 주의해야 합니다."
8,2-2,다양한 조건 만들기,"앞에서 if문의 조건으로 “answer == 1”, “1 < 0”, “1 > 0” 등을 넣어 보았습니다. 이렇게 명백히 참이나 거짓이 보이는 것뿐만 아니라 많은 자료형을 조건에 넣을 수 있는데, 불 자료형 절에서 설명했듯이 정수나 실수에서 0, 비어 있는 리스트나 튜플 등은 False가 됩니다.\n--------\n>>> if ""a"":\n...   print(""a"")\na\n>>> if 0:\n...   print(""0"")\n>>>\n--------\n예를 들어 “a”라는 문자열 값은 빈 문자열이 아니므로 bool형으로 변환되면 True가 되며, 0이라는 정수 값은 False입니다. 따라서 위 예시에서는 “a”만 출력됩니다.\n조건을 여러 개 충족시켜야 하거나, 여러 개 조건 중 적어도 하나를 충족시켜야 하거나, 조건이 반대로 되어야 하는 상황에서는 어떻게 하면 될까요? 각각 and, or, not을 사용하면 됩니다.\n--------\n구문	| 설명\n--------\nA and B	| A와 B가 모두 True일 때만 True, 나머지는 False\nA or B	| A와 B가 모두 False일 때만 False, 나머지는 True\nnot A	| A가 True이면 False, False이면 True\n--------\n>>> if 2 + 2 == 5 and 0 != 1:\n...   print(""출력 1"")\n>>> if 2 + 2 == 5 or 0 != 1:\n...   print(""출력 2"")\n출력 2\n>>> if not False:\n...   print(""출력 3"")\n출력 3\n--------\n2 + 2 == 5는 거짓이지만, 0 != 1은 참입니다. 따라서 두 조건을 and로 이으면 거짓이 되고, or로 이으면 참이 됩니다. False는 그 자체로 거짓이므로, not False는 참입니다. 따라서 위 예시에서는 “출력 2”와 “출력 3”이 출력됩니다.\n마지막으로 특수 연산자인 in 또한 조건을 만드는 데 유용하게 쓰입니다. A in B는 A가 B의 구성 요소인 경우 True, 아닌 경우 False를 반환합니다. 반대로 A not in B는 구성 요소가 아닐 때 True를 반환합니다. B에는 리스트, 튜플, 문자열 등이 들어갑니다.\n--------\n>>> shopping_list = [""apple"", ""banana"", ""orange""]\n>>> if ""apple"" in shopping_list:\n...   print(""사과를 사러 간다"")\n사과를 사러 간다\n>>> if ""grape"" in shopping_list:\n...   print(""포도를 사러 간다"")\n>>>\n--------\n위 예제에서 장보기 목록에는 apple은 있지만 grape는 없기 때문에, “사과를 사러 간다”만 출력이 됩니다.\n"
9,2-3,조건문의 다양한 분기: else와 elif,"한 조건을 두고 조건이 참일 때와 거짓일 때 실행해야 할 것을 달리하고 싶을 때가 있을 것입니다. 위의 정답이 1일 때 정답임을 알려주는 예제에서 1이 아닐 때 오답임을 알려주고자 할 때, 아래와 같이 쓰는 건 비교적 번거로운 일입니다.\n--------\nif answer == 1:\n  print(""정답입니다!"")\nif answer != 1:\n  print(""정답이 아닙니다."")\n--------\n이럴 때 쓸 수 있는 것이 else입니다. Else는 조건문에서 조건에 맞지 않는 경우 실행할 대상을 묶는 역할을 합니다. 따라서 위 코드는 아래와 같이 고쳐 쓸 수 있습니다.\n--------\nif answer == 1:\n  print(""정답입니다!"")\nelse:\n  print(""정답이 아닙니다."")\n--------\n경우에 따라서는 분류 기준 등 조금 더 복잡한 조건이 필요할 때가 있습니다. 시내버스를 탈 때 19세 이상은 1500원, 13세부터 18세까지는 1200원, 7세부터 12세까지는 800원을 받으며, 그 아래는 무임이라고 합시다. 나이에 따라 요금을 출력하는 코드를 아래와 같이 작성해 볼 수 있을 것입니다.\n--------\nif age >= 19:\n  print(1500)\nelse:\n  if age >= 13:\n    print(1200)\n  else:\n    if age >= 7:\n      print(800)\n    else:\n      print(0)\n--------\n조건이나 실행할 명령들의 들여쓰기가 달라서 보기에 불편합니다. 이럴 때 쓸 수 있는 것이 elif로, 그 이름에서 볼 수 있듯 else와 if를 합쳐 놓은 것입니다. 이를 이용하면 위 코드를 아래와 같이 보기 좋게 만들 수 있습니다.\n--------\nif age >= 19:\n  print(1500)\nelif age >= 13:\n  print(1200)\nelif age >= 7:\n  print(800)\nelse:\n  print(0)\n--------\n들여쓰기가 일정해져서 보기에 편해졌을 것입니다.\n "
10,3-1,반복문 while,"Python에서 쓰이는 반복문에는 while과 for가 있는데, while문은 주어진 조건을 만족하는 동안 while문 안의 동작을 반복하게 합니다. 다음 예시에서 어떤 결과가 출력될지 예상해 봅시다.\n--------\n>>> i = 0\n>>> while i < 3:\n...   print(i)\n...   i += 1\n--------\n맨 처음 i의 값은 0입니다. 이후 while문 안에서 i가 출력되고, i의 값이 1 증가되는 과정을 반복하게 됩니다. 다만 이 과정이 영원히 반복되지는 않을 것입니다. i가 3이 되면 while문의 조건과 맞지 않기 때문입니다. 따라서 i가 0, 1, 2일 때만 출력이 될 것이라 예상할 수 있습니다.\n0\n1\n2\n리스트 또한 조건이 된다는 점을 이용해, 리스트의 pop 함수를 이용해 리스트의 뒤부터 원소를 하나씩 뽑아내 출력하는 코드를 작성할 수 있습니다. 아래 코드가 오류 없이 동작함은, 마지막 남은 원소인 Mercury를 뽑아내면 리스트가 비어서 False가 되기 때문입니다.\n--------\n>>> list = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]\n>>> while list:\n...   print(list.pop())\nSaturn\nJupiter\nMars\nEarth\nVenus\nMercury\n>>> \n--------"
11,3-2,"반복문의 제어: break, continue와 무한 루프","때로는 while문의 조건에 맞더라도 다른 사정이 생겨서 while문을 빠져나오고 싶을 때가 있을 것입니다. 이럴 때 쓰는 것이 break입니다. break는 반복문을 빠져나가게끔 하며 흔히 반복문 안의 if문에 들어갑니다. 어느 가게에서 금일 아이스크림을 고객에게 하나씩 나누어 주는 행사를 하며, 아이스크림이 다 소진되면 문을 닫아야 한다고 합시다.\n--------\nqty_icecream = int(input(""아이스크림 수량을 입력하세요.\n""))\ncustomers = int(input(""고객의 수를 입력하세요.\n""))\nwhile customers > 0:\n  print(""아이스크림을 나눠주었습니다."")\n  qty_icecream -= 1\n  customers -= 1\nif qty_icecream <= 0:\n  print(""아이스크림이 없습니다. 영업을 종료합니다."")\n  break\n--------\n아이스크림 수를 50, 고객의 수를 60으로 정하면 “아이스크림을 나눠주었습니다.”는 50번 출력이 되고, 아이스크림의 수가 0이 되므로 if문 안으로 들어가면서 “아이스크림이 없습니다. 영업을 종료합니다.”가 출력되고, break를 만나면서 while문을 빠져나오게 됩니다. 반대로 아이스크림 수를 60, 고객의 수를 50으로 정하면 “아이스크림을 나눠주었습니다.”만 50번 출력이 되며, 이후 대기 중인 고객의 수가 0이 되므로 while문의 조건에 따라 while문을 빠져나오게 됩니다.\n반복문에서 흐름을 조작하는 구문으로 break 말고도 continue가 있는데, continue를 만나면 반복문의 처음으로 돌아가게끔 합니다. break와 마찬가지로 continue 또한 흔히 반복문 안의 if문에 들어갑니다. continue는 반복적인 작업을 이어서 해야 하지만 한 단계를 끝까지 할 필요가 없는 경우 바로 다음 단계를 수행할 수 있게 합니다. while과 continue를 이용해 100 이하의 2의 배수인 양의 정수를 출력하는데, 5의 배수는 배제하는 코드를 다음과 같이 만들 수 있습니다.\n--------\ni = 2\nwhile i <= 100:\n  if i % 5 == 0:\n    continue\n  print(i)\ni += 2\n--------\nwhile문의 조건에는 True도 들어갈 수 있습니다. 이런 경우 while문 안에서 무엇이 실행되든 조건이 항상 참이라는 것은 변하지 않기 때문에, 프로그램은 영원히 while문을 벗어나지 못하게 되며 이를 무한 루프라고 합니다.\n--------\n>>> sheep = 1\n... while True:\n...   print(""양 {0}마리"".format(sheep))\n...   sheep += 1\n--------\n위 코드를 실행하면 영원히 양을 세게 됩니다. 참고로 format 함수는 앞의 문자열에 대해 중괄호{}로 둘러싸인 부분에 주어진 값을 넣는 함수입니다.\n--------\n양 1마리\n양 2마리\n양 3마리\n(…)\n양 7149마리\n양 7150마리\n양 7151마리\n(…)\n--------\n다만 Python 프로그램의 실행 도중에는 Ctrl+C를 눌러 실행을 중단할 수 있으며, 무한 루프 안에 있더라도 예외는 아닙니다.\n실제 무한 루프(while True)가 쓰이면 while문 안에 루프를 빠져나갈 수 있는 여지를 만들어 두곤 하는데, 이는 앞에 나왔던 break를 통해 실현할 수 있습니다. 위 코드를 다음과 같이 고쳐 주면 양은 100마리까지만 세고 양 세는 것을 멈출 수 있을 것입니다.\n--------\n>>> sheep = 1\n>>> while True:\n...   print(""양 {0}마리"".format(sheep))\n...   if sheep >= 100:\n...     break\n...   sheep += 1\n양 1마리\n양 2마리\n양 3마리\n(…)\n양 99마리\n양 100마리\n--------"
12,3-3,"반복문 for, 정수열을 만드는 range","반복문에는 while 말고도 for가 있습니다. while문에서는 반복문을 실행할 조건을 수반했는데, for에서는 반복문을 실행할 요소들의 모임, 곧 리스트, 튜플, 문자열 등이 함께 나옵니다. 즉, while은 조건을 충족하는 동안 while문 안의 명령을 실행한다면 for는 주어진 리스트나 문자열 등 원소의 모임 안에 있는 원소들에 대해서 for문 안의 명령을 실행합니다.\n명단을 주고, 그 명단 안의 이름을 출력하는 코드를 아래와 같이 만들 수 있습니다.\n--------\n>>> name_list = [""Aaron"", ""Elizabeth"", ""James""]\n>>> for name in name_list:\n...   print(name)\nAaron\nElizabeth\nJames\n--------\n조금 더 복잡한 형태로, 명단이 이름-성의 튜플들의 리스트로 되어 있고 이 중 성만을 출력하는 경우에는 다음과 같이 할 수 있습니다.\n--------\n>>> name_list = [(""Aaron"", ""Smith""), (""Elizabeth"", ""Grey""), (""James"", ""Becker"")]\n>>> for (first, last) in name_list:\n...   print(last)\nSmith\nGrey\nBecker\n--------\n\nfor문에서 정수를 활용하고 싶은 경우 따라오는 것이 range 함수인데, 이는 아래와 같이 주어진 조건에 맞추어 정수열을 만들어 냅니다.\n--------\n구문	| 설명\n--------\nrange(m)	| 0 이상 m 미만의 정수\nrange(m, n)	| m 이상 n 미만의 정수\nrange(m, n, d)	| m으로 시작해 n이 나오기 전까지 값을 d만큼 변화시키면서 나오는 정수\n--------\nwhile문에서 0부터 2까지 출력하는 예제가 있었는데, 이를 for문과 range 함수를 이용하면 다음과 같이 바꿔 쓸 수 있습니다.\n--------\n>>> for i in range(3):\n...   print(i)\n0\n1\n2\n--------\n코드를 비교해 보면 i를 1 증가시키는 구문이 사라지는 등, 확연히 간결해졌음을 볼 수 있습니다. 다음은 100 이하의 짝수인 양의 정수를 100부터 내림차순으로 출력하는 코드입니다.\n--------\n>>> for i in range(100, 0, -2):\n...   print(i)\n100\n98\n96\n(…)\n4\n2\n--------\nwhile문뿐만 아니라 for문에서도 break와 continue를 사용할 수 있음은 반복문이기 때문에 당연합니다. 또한 조건문과 반복문은 필요에 따라 얼마든지 겹쳐 쓸 수 있기 때문에, 이를 이용하면 원하는 흐름을 만들어낼 수 있습니다. 다음 예제를 학습하고, 연습문제로 들어가도록 합시다.\n다음은 리스트 안의 정수를 반복해서 2로 나누어 홀수로 만들어서 새 리스트에 추가하며, 10의 배수에 대해서는 건너뛰는 코드입니다.\n--------\n>>> old = [52, 69, 80, 128, 144, 159]\n>>> new = []\n>>> for i in old:\n...   if i % 10 == 0:\n...     continue\n...   while i % 2 == 0:\n...     i //= 2\n...   new.append(i)\n...\n>>> print(new)\n[13, 69, 1, 9, 159]\n--------\n옛 리스트에 정수가 6개가 있었으나 새 리스트에 정수가 5개가 있음은 원래 리스트의 80은 10의 배수이기 때문에 새 리스트에 삽입이 되지 않았기 때문입니다.\n"
